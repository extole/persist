// $Id$

package net.sf.persist;

import net.sf.persist.annotations.Column;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Holds mapping data from a given class and a table
 */
public final class AnnotationTableMapping extends Mapping {

    private static final Logger ENGINE_LOG = LoggerFactory.getLogger("persist.engine");

    private final Class<?> objectClass;

    private final net.sf.persist.annotations.Table tableAnnotation;
    private final String tableName;

    private final Map<String, net.sf.persist.annotations.Column> annotationsMap;
    private final Map<String, Method> getterByFieldName;
    private final Map<String, Method> setterByFieldName;

    private final Map<String, String> fieldNameByColumnName = new LinkedHashMap<>();
    private final List<String> selectColumns;
    private final List<String> primaryKeys;
    private final List<String> notPrimaryKeys;
    private final List<String> autoGeneratedColumns;
    private final List<String> notAutoGeneratedColumns;
    private final List<String> insertColumns;
    private final List<String> updateColumns;

    private final String selectSql;
    private final String selectAllSql;
    private final String insertSql;
    private final String updateSql;
    private final String deleteSql;

    public AnnotationTableMapping(final Class<?> objectClass) {
        // object class
        this.objectClass = objectClass;

        // table annotation
        tableAnnotation = objectClass.getAnnotation(net.sf.persist.annotations.Table.class);

        if (tableAnnotation == null || tableAnnotation.name() == null) {
            throw new PersistException("Class missing @Table annotation or table name: " + objectClass.getName());
        }

        // table name from annotation
        tableName = tableAnnotation.name();

        // map field names to annotations, getters and setters
        final Map[] fieldsMaps = getFieldsMaps(objectClass);
        annotationsMap = fieldsMaps[0];
        getterByFieldName = fieldsMaps[1];
        setterByFieldName = fieldsMaps[2];

        List<net.sf.persist.annotations.Column> columns = new ArrayList<>();
        for (String fieldName : getterByFieldName.keySet()) {
            Column column = annotationsMap.get(fieldName);
            columns.add(column);
            fieldNameByColumnName.put(column.name().toLowerCase(Locale.ENGLISH), fieldName);
        }

        primaryKeys = columns.stream()
            .filter(net.sf.persist.annotations.Column::primaryKey)
            .map(net.sf.persist.annotations.Column::name)
            .collect(Collectors.toList());

        if (primaryKeys.isEmpty()) {
            ENGINE_LOG.warn("No primary keys annotated. Any update, delete, or readByPrimaryKey calls will not work.");
        }

        notPrimaryKeys = columns.stream()
            .filter(col -> !col.primaryKey())
            .map(net.sf.persist.annotations.Column::name)
            .collect(Collectors.toList());

        autoGeneratedColumns = columns.stream()
            .filter(net.sf.persist.annotations.Column::autoGenerated)
            .map(net.sf.persist.annotations.Column::name)
            .collect(Collectors.toList());

        notAutoGeneratedColumns = columns.stream()
            .filter(col -> !col.autoGenerated())
            .map(net.sf.persist.annotations.Column::name)
            .collect(Collectors.toList());

        selectColumns = columns.stream()
            .map(net.sf.persist.annotations.Column::name)
            .collect(Collectors.toList());

        insertColumns = columns.stream()
            .filter(col -> !col.autoGenerated() && !col.readOnly())
            .map(net.sf.persist.annotations.Column::name)
            .collect(Collectors.toList());

        updateColumns = columns.stream()
            .filter(col -> !col.primaryKey() && !col.readOnly())
            .map(net.sf.persist.annotations.Column::name)
            .collect(Collectors.toList());

        // assemble sql blocks to be used by crud sql statements

        final String selectColumnList = join(selectColumns, "", ",");
        final String insertColumnList = join(insertColumns, "", ",");
        final String insertPlaceholders = multiply("?", insertColumns.size(), ",");
        final String whereConditions = join(primaryKeys, "=?", " and ");
        final String updateAssignmentList = join(updateColumns, "=?", ",");

        // assemble crud sql statements

        selectSql = "select " + selectColumnList + " from " + tableName + " where " + whereConditions;
        selectAllSql = "select " + selectColumnList + " from " + tableName;

        insertSql = "insert into " + tableName + "(" + insertColumnList + ") values (" + insertPlaceholders + ")";

        updateSql = "update " + tableName + " set " + updateAssignmentList + " where " + whereConditions;
        deleteSql = "delete from " + tableName + " where " + whereConditions;

    }

    // ---------- getters and setters ----------

    public Class<?> getObjectClass() {
        return objectClass;
    }

    public String getTableName() {
        return tableName;
    }

    public net.sf.persist.annotations.Table getTableAnnotation() {
        return tableAnnotation;
    }

    public List<String> getSelectColumns() {
        return selectColumns;
    }

    public Map<String, String> getFieldNameByColumnName() {
        return fieldNameByColumnName;
    }

    public List<String> getPrimaryKeys() {
        return primaryKeys;
    }

    public List<String> getNotPrimaryKeys() {
        return notPrimaryKeys;
    }

    public List<String> getAutoGeneratedColumns() {
        return autoGeneratedColumns;
    }

    public List<String> getNotAutoGeneratedColumns() {
        return notAutoGeneratedColumns;
    }

    public List<String> getInsertColumns() {
        return insertColumns;
    }

    public List<String> getUpdateColumns() {
        return updateColumns;
    }

    public Map<String, net.sf.persist.annotations.Column> getAnnotationsMap() {
        return annotationsMap;
    }

    public Map<String, Method> getGetterByFieldName() {
        return getterByFieldName;
    }

    public Map<String, Method> getSetterByFieldName() {
        return setterByFieldName;
    }

    @Override
    public Method getGetterForColumn(final String columnName) {
        final String fieldName = fieldNameByColumnName.get(columnName.toLowerCase(Locale.ENGLISH));
        return getterByFieldName.get(fieldName);
    }

    @Override
    public Method getSetterForColumn(final String columnName) {
        final String fieldName = fieldNameByColumnName.get(columnName.toLowerCase(Locale.ENGLISH));
        return setterByFieldName.get(fieldName);
    }

    public String getSelectSql() {
        return selectSql;
    }

    public String getSelectAllSql() {
        return selectAllSql;
    }

    public String getInsertSql() {
        return insertSql;
    }

    public String getUpdateSql() {
        return updateSql;
    }

    public String getDeleteSql() {
        return deleteSql;
    }

    // ---------- helpers ----------

    private static String join(final List<String> list, final String suffix, final String separator) {
        final StringBuffer buf = new StringBuffer();
        for (String obj : list) {
            buf.append(obj).append(suffix).append(separator);
        }
        if (buf.length() > 0 && separator.length() > 0) {
            buf.delete(buf.length() - separator.length(), buf.length());
        }
        return buf.toString();
    }

    private static String multiply(final String str, final int times, final String separator) {
        final StringBuffer buf = new StringBuffer();
        for (int i = 0; i < times; i++) {
            buf.append(str).append(separator);
        }
        if (separator.length() > 0) {
            buf.delete(buf.length() - separator.length(), buf.length());
        }
        return buf.toString();
    }

}
